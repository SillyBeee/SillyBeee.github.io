{"title":"坐标系转换及相机成像原理","uid":"662b057187cfe7607b2d798de545efde","slug":"坐标系转换及相机成像原理","date":"2024-12-01T15:06:10.000Z","updated":"2024-12-01T15:27:14.682Z","comments":true,"path":"api/articles/坐标系转换及相机成像原理.json","keywords":null,"cover":"/img/zuobiaoxi.png","content":"<blockquote>\n<h3 id=\"由于在获取模拟弹道在图像坐标系上的roi区域获取功能时需要用到坐标系转化的知识暑假的时候学的不是很明白遂重温了一遍知识写下此markdown\">由于在获取模拟弹道在图像坐标系上的ROI区域获取功能时需要用到坐标系转化的知识,暑假的时候学的不是很明白，遂重温了一遍知识，写下此markdown</h3>\n<p>通过一个B站视频 <a href=\"https://www.bilibili.com/video/BV12u411G71A/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=65d480539ebc12c758cc91b72696b4af\">相机模型都没弄懂，怎么搞机器人视觉算法?</a> 快速了解了相机成像和外参矩阵，内参矩阵的大致原理(讲的真的非常好,跟着推一遍就差不多理解了)</p>\n</blockquote>\n<blockquote>\n<h3 id=\"术语的具体概念\">术语的具体概念</h3>\n</blockquote>\n<blockquote>\n<p><span class=\"math display\">\\[ 相机外参(Camera Extrinsics)\\]</span></p>\n</blockquote>\n<p>是描述相机相对于世界坐标系或其他参考坐标系的位置和方向的参数。外参主要包括两个部分： ####　1.旋转矩阵 (Rotation Matrix) 表示相机的方向，也就是世界坐标系如何通过旋转变换到相机坐标系。 #### 2.平移向量 (Translation Vector) 表示相机的位置，即世界坐标系的原点在相机坐标系中的位置。外参的作用是将世界坐标系的点转换到相机坐标系，通过以下公式实现： <span class=\"math display\">\\[\nP_{\\text{camera}} = R \\cdot P_{\\text{world}} + T \n\\]</span> 其中: - $ P_{} $ :点在相机坐标系中的坐标。 - $ P_{} $ :点在世界坐标系中的坐标。 - $ R $: 旋转矩阵，描述相机的方向。 - $ T $: 平移向量，描述相机的位置。</p>\n<blockquote>\n<p><span class=\"math display\">\\[ 内参矩阵（Intrinsic Matrix）\\]</span></p>\n</blockquote>\n是描述相机内部参数的一个3×3 矩阵，用于将归一化相机坐标系的点映射到图像像素坐标系中的点。它反映了相机的光学特性和传感器设置。 #### 1.内参矩阵的形式 内参矩阵<span class=\"math inline\">\\(K\\)</span>通常表示为： <span class=\"math display\">\\[\nK =\n\\begin{bmatrix}\nf_x &amp; 0   &amp; c_x \\\\\n0   &amp; f_y &amp; c_y \\\\\n0   &amp; 0   &amp; 1\n\\end{bmatrix}\n\\]</span> 其中 - ($ x <span class=\"math inline\">\\(,\\)</span> y <span class=\"math inline\">\\():归一化平面上的点坐标（单位化后的相机坐标系，\\)</span>x$ = <span class=\"math inline\">\\(X_c / Z_c , y = Y_c/Z_c）。\\)</span> - <span class=\"math inline\">\\((u,v):\\)</span> 图像像素坐标 #### 3. 内参矩阵的含义 - <span class=\"math inline\">\\(焦距f_x,f_y:\\)</span> - 决定了图像的放大倍数。 - 数值越大，图像越“窄”，也就是视场角（FOV）越小。 - <span class=\"math inline\">\\(主点c_x,c_y:\\)</span> - 表示传感器坐标系的原点偏移量。 - 如果主点不在图像正中心，则可能是相机安装或制造误差。 &gt; ## 相机投影模型 相机的投影模型可以用以下公式描述： $\n<span class=\"math display\">\\[\\begin{bmatrix} u \\\\ v \\\\ 1 \\end{bmatrix}\\]</span>\n=  \n<span class=\"math display\">\\[\\begin{bmatrix} f_x &amp; 0 &amp; c_x \\\\ 0 &amp; f_y &amp; c_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}\\]</span>\n\n<span class=\"math display\">\\[\\begin{bmatrix} X_c \\\\ Y_c \\\\ Z_c \\end{bmatrix}\\]</span>\n<p>$ #### 2. 公式中的符号解释 - $ (X_c,Y_c,Z_c) :$ 点在<span class=\"math inline\">\\(相机坐标系\\)</span>下的三维坐标 - $ (u,v)<span class=\"math inline\">\\(: 点在\\)</span>图像坐标系$（像素坐标系）下的二维坐标。 - <span class=\"math inline\">\\(f_x,f_y:\\)</span>相机的焦距，分别以像素为单位描述横纵方向上的尺度。通常由相机内参提供。 - <span class=\"math inline\">\\((c_x,c_y):\\)</span> 主点坐标（Principal Point），表示图像的光轴与图像平面的交点，也由内参提供。 #### 3. 转换过程 根据公式，转换可以分为以下几步：</p>\n<p><span class=\"math inline\">\\(（1）归一化设备坐标系（Normalized Device Coordinates）\\)</span> 首先将三维点投影到归一化平面： <span class=\"math display\">\\[ x = \\frac{X_c}{Z_c} , y = \\frac{Y_c}{Z_c} \\]</span> 这一步将点从三维相机坐标系投影到二维平面上。 <span class=\"math inline\">\\((2)映射到图像像素坐标系\\)</span> 通过相机内参矩阵将归一化坐标映射到图像坐标系： <span class=\"math display\">\\[ u = f_x \\cdot x + c_x , v = f_y \\cdot y + c_y \\]</span> 得到了点在图像上的像素坐标。 #### 4. 简化公式</p>\n<p><span class=\"math display\">\\[ \\begin{bmatrix} u \\\\ v \\\\ 1 \\end{bmatrix} = \\frac{1}{Z_c} \\cdot K \\cdot \\begin{bmatrix} X_c \\\\ Y_c \\\\ Z_c \\end{bmatrix} \\]</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*@brief 输入给定pitch角度，弹速，风阻系数，重力系数输出返回图像上的像素点坐标</span></span><br><span class=\"line\"><span class=\"comment\">*@param pitch:pitch角度</span></span><br><span class=\"line\"><span class=\"comment\">*@param velocity:弹速</span></span><br><span class=\"line\"><span class=\"comment\">*@param kof:风阻系数</span></span><br><span class=\"line\"><span class=\"comment\">*@param gravity:重力系数</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;cv::Point2d&gt; <span class=\"title\">ShooterNode::GetROIFromShoot</span><span class=\"params\">(<span class=\"type\">float</span> pitch, <span class=\"type\">double</span> velocity , <span class=\"type\">double</span> kof , <span class=\"type\">double</span> gravity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">tf2_ros::Buffer <span class=\"title\">tf_buffer</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;get_clock())</span></span>;</span><br><span class=\"line\">    <span class=\"function\">tf2_ros::TransformListener <span class=\"title\">tf_listener</span><span class=\"params\">(tf_buffer)</span></span>;</span><br><span class=\"line\">    geometry_msgs::msg::TransformStamped transform_stamped;</span><br><span class=\"line\">    <span class=\"comment\">// 获取shooter坐标系到camera坐标系的变换</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        transform_stamped = tf_buffer.<span class=\"built_in\">lookupTransform</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;camera&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;shooter&quot;</span>,</span><br><span class=\"line\">            tf2::TimePointZero</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (tf2::TransformException &amp;ex) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">RCLCPP_ERROR</span>(rclcpp::<span class=\"built_in\">get_logger</span>(<span class=\"string\">&quot;shooter_node&quot;</span>), <span class=\"string\">&quot;Transform error: %s&quot;</span>, ex.<span class=\"built_in\">what</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 开始计算弹道   </span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = <span class=\"built_in\">tan</span>(pitch/ <span class=\"number\">180</span> * M_PI); <span class=\"comment\">//pitch的tan值</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化的xyz坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> z = <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"type\">double</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化的线速度</span></span><br><span class=\"line\">    <span class=\"type\">double</span> vx = velocity;</span><br><span class=\"line\">    <span class=\"type\">double</span> vy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 迭代5次模拟弹道在shooter坐标系下的5个点</span></span><br><span class=\"line\">    std::vector&lt;cv::Point3d&gt; points_pic;  <span class=\"comment\">//用于存储弹道在图像坐标系下的5个点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> t = i*<span class=\"number\">0.1</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> ax = -kof * vx - <span class=\"built_in\">sin</span>(pitch/ <span class=\"number\">180</span> * M_PI);</span><br><span class=\"line\">        <span class=\"type\">double</span> ay = gravity * <span class=\"built_in\">cos</span>(pitch/ <span class=\"number\">180</span> * M_PI);</span><br><span class=\"line\">        x = x + vx * t + <span class=\"number\">0.5</span> * ax * t * t;</span><br><span class=\"line\">        y = y + vy * t + <span class=\"number\">0.5</span> * ay * t * t;</span><br><span class=\"line\">        vx = vx + ax * t;</span><br><span class=\"line\">        vy = vy + ay * t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算完毕，将该点转换至camera坐标系下</span></span><br><span class=\"line\">        geometry_msgs::msg::PointStamped point_stamped_shooter;</span><br><span class=\"line\">        point_stamped_shooter.point.x = x;</span><br><span class=\"line\">        point_stamped_shooter.point.y = y;</span><br><span class=\"line\">        point_stamped_shooter.point.z = z;</span><br><span class=\"line\">        point_stamped_shooter.header.frame_id = <span class=\"string\">&quot;shooter&quot;</span>;</span><br><span class=\"line\">        point_stamped_shooter.header.stamp = <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">get_clock</span>()-&gt;<span class=\"built_in\">now</span>();</span><br><span class=\"line\">        geometry_msgs::msg::PointStamped point_stamped_camera;</span><br><span class=\"line\">        tf_buffer.<span class=\"built_in\">transform</span>(point_stamped_shooter, point_stamped_camera, <span class=\"string\">&quot;camera&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将该点转换至图像坐标系下</span></span><br><span class=\"line\">        cv::Mat point_camera = (cv::<span class=\"built_in\">Mat_</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">3</span>,<span class=\"number\">1</span>) &lt;&lt; point_stamped_camera.point.x, point_stamped_camera.point.y, point_stamped_camera.point.z);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point_camera.<span class=\"built_in\">at</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">2</span>,<span class=\"number\">0</span>) = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">RCLCPP_WARN</span>(<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">get_logger</span>(), <span class=\"string\">&quot;相机坐标系下的点的z坐标为0,可能出现了一些错误,已将其赋为0.001&quot;</span>);</span><br><span class=\"line\">            point_camera.<span class=\"built_in\">at</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">2</span>,<span class=\"number\">0</span>) = <span class=\"number\">0.001</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cv::Mat point_image = camera_matrix_ * point_camera / point_camera.<span class=\"built_in\">at</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        points_pic.<span class=\"built_in\">push_back</span>(cv::<span class=\"built_in\">Point2d</span>(point_image.<span class=\"built_in\">at</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">0</span>,<span class=\"number\">0</span>), point_image.<span class=\"built_in\">at</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"number\">1</span>,<span class=\"number\">0</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> points_pic;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","feature":true,"text":" 由于在获取模拟弹道在图像坐标系上的ROI区域获取功能时需要用到坐标系转化的知识,暑假的时候学的不是很明白，遂重温了一遍知识，写下此markdown 通过一个B...","permalink":"/post/坐标系转换及相机成像原理","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"C++","slug":"C","count":2,"path":"api/tags/C.json"},{"name":"相机","slug":"相机","count":1,"path":"api/tags/相机.json"},{"name":"坐标系转换","slug":"坐标系转换","count":1,"path":"api/tags/坐标系转换.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%B1%E4%BA%8E%E5%9C%A8%E8%8E%B7%E5%8F%96%E6%A8%A1%E6%8B%9F%E5%BC%B9%E9%81%93%E5%9C%A8%E5%9B%BE%E5%83%8F%E5%9D%90%E6%A0%87%E7%B3%BB%E4%B8%8A%E7%9A%84roi%E5%8C%BA%E5%9F%9F%E8%8E%B7%E5%8F%96%E5%8A%9F%E8%83%BD%E6%97%B6%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E5%8C%96%E7%9A%84%E7%9F%A5%E8%AF%86%E6%9A%91%E5%81%87%E7%9A%84%E6%97%B6%E5%80%99%E5%AD%A6%E7%9A%84%E4%B8%8D%E6%98%AF%E5%BE%88%E6%98%8E%E7%99%BD%E9%81%82%E9%87%8D%E6%B8%A9%E4%BA%86%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E5%86%99%E4%B8%8B%E6%AD%A4markdown\"><span class=\"toc-text\">由于在获取模拟弹道在图像坐标系上的ROI区域获取功能时需要用到坐标系转化的知识,暑假的时候学的不是很明白，遂重温了一遍知识，写下此markdown</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AF%E8%AF%AD%E7%9A%84%E5%85%B7%E4%BD%93%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">术语的具体概念</span></a></li></ol>","author":{"name":"SillyBee","slug":"blog-author","avatar":"/img/mei.png","link":"/","description":"来自杭州电子科技大学的一名大二学生,是Robomaster比赛PHOENIX战队CV成员","socials":{"github":"https://github.com/SillyBeee","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/42-46-43-3","csdn":"https://blog.csdn.net/SillyBeee?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/1634290885471136","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"在PVE系统上的NAS与软路由配置","uid":"d8bc573a4b1b9573bcb50401a437db04","slug":"在PVE系统上的NAS与软路由配置","date":"2024-11-27T16:33:02.000Z","updated":"2024-12-01T15:24:06.309Z","comments":true,"path":"api/articles/在PVE系统上的NAS与软路由配置.json","keywords":null,"cover":null,"text":" ","permalink":"/post/在PVE系统上的NAS与软路由配置","photos":[],"count_time":{"symbolsCount":1,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Proxmox VE","slug":"Proxmox-VE","count":1,"path":"api/tags/Proxmox-VE.json"},{"name":"软路由","slug":"软路由","count":1,"path":"api/tags/软路由.json"},{"name":"NAS","slug":"NAS","count":1,"path":"api/tags/NAS.json"}],"author":{"name":"SillyBee","slug":"blog-author","avatar":"/img/mei.png","link":"/","description":"来自杭州电子科技大学的一名大二学生,是Robomaster比赛PHOENIX战队CV成员","socials":{"github":"https://github.com/SillyBeee","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/42-46-43-3","csdn":"https://blog.csdn.net/SillyBeee?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/1634290885471136","customs":{}}},"feature":true}}